
# Unhold kubernetes packages if required
- name: Unhold kubernetes packages
  command: apt-mark unhold "{{ item }}"
  with_items:
    - kubeadm
    - kubelet
    - kubectl
    - kubernetes-cni
    - conntrack
    - cri-tools
    - socat
  changed_when: false
  when: 'item|string in ansible_facts.packages'

# Install kubernetes common packages and add version lock
- name: Install kubernetes packages
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - "kubeadm={{ kubernetes_version }}"
      - "kubelet={{ kubernetes_version }}"
      - "kubectl={{ kubernetes_version }}"
      - "kubernetes-cni"
  notify: Restart kubelet.service

# Gather package facts
- name: Gather Package facts
  package_facts:
    manager: apt

- name: Hold kubernetes packages
  command: apt-mark hold "{{ item }}"
  with_items:
    - kubeadm
    - kubelet
    - kubectl
    - kubernetes-cni
    - conntrack
    - cri-tools
    - socat
  changed_when: false
  when: 'item|string in ansible_facts.packages'

# Start kubelet
- name: Ensure kubelet.service is enabled and started
  systemd:
    name: kubelet
    daemon-reload: yes
    enabled: yes
    masked: no
    state: started
    no_block: no

- name: Generate kubeadm token
  shell: kubeadm token generate
  register: kubeadmTokenGenerateResult

- name: Add kubeadm configuration
  template:
    src: "{{ role_path }}/templates/master/kubernetes/kubeadm-config.yaml.j2"
    dest: /etc/kubernetes/kubeadm-config.yaml
    group: "{{ kubernetes_system_group }}"
    owner: "{{ kubernetes_system_user }}"
    mode: 0644
  vars:
    kubernetes_kubeadm_token: "{{ kubeadmTokenGenerateResult.stdout }}"

- name: Running preflight checks
  command: "kubeadm init --config /etc/kubernetes/kubeadm-config.yaml phase preflight --cri-socket {{ kubernetes_cri_socket_path }}"
  register: preflightChecks
  ignore_errors: true
  no_log: true

- name: Evaluating preflight checks
  debug:
    msg:
      - "************"
      - "*** INFO ***"
      - "************"
      - "It seems this machine has been already initialized as MASTER, won't be re-initialized in current state. If there is a requirement to re-initialize it as fresh then first reset it with :"
      - "kubeadm reset -f"
  when: preflightChecks.stderr.find('ERROR FileAvailable') != -1 or preflightChecks.stderr.find('ERROR Port') != -1 or preflightChecks.stderr.find('/var/lib/etcd is not empty') != -1

- name: Setup kubernetes master
  command: "kubeadm init --config /etc/kubernetes/kubeadm-config.yaml --cri-socket {{ kubernetes_cri_socket_path }}"
  register: kubeadmInitResult
  ignore_errors: true
  when: preflightChecks is succeeded

- name: Write kubeadm init logs
  block:
    - name: Write kubeadm init stdout result into logs
      copy:
        dest: "{{ kubernetes_log_dir_path }}/kubeadm-init.log"
        content: "{{ kubeadmInitResult.stdout_lines | join('\n') }}"
      when: kubeadmInitResult.stdout_lines is defined
    - name: Write kubeadm init stderr result into logs
      copy:
        dest: "{{ kubernetes_log_dir_path }}/kubeadm-init-error.log"
        content: "{{ kubeadmInitResult.stderr_lines | join('\n') }}"
      when: kubeadmInitResult.stderr_lines is defined

- name: Stop if master setup failed
  fail:
    msg:
      - "**********************"
      - "*** Error detected ***"
      - "**********************"
      - "Kubernetes master setup has failed, please check log files available in {{ kubernetes_log_dir_path }} for more information."
  when: kubeadmInitResult is failed

- name: Add kubectl configuration directory
  file:
    group: "{{ kubernetes_system_group }}"
    owner: "{{ kubernetes_system_user }}"
    path: /root/.kube
    recurse: yes
    state: directory

- name: Add kubectl configuration
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
    group: "{{ kubernetes_system_group }}"
    owner: "{{ kubernetes_system_user }}"
    mode: 0640
    backup: yes

- name: Validating server startup
  wait_for:
    delay: 60
    timeout: 900
    host: 127.0.0.1
    port: "{{ kubernetes_master_bind_port }}"
    state: started
    msg: 'Server is not ready yet !!'

- name: Add kubectl bash-completion
  shell: "kubectl completion bash > /etc/bash_completion.d/kubectl"
  changed_when: false

- name: Setup pod network
  shell: kubectl apply -f "{{ kubernetes_pod_netowrk_url }}$(kubectl version | base64 | tr -d '\n')"
  changed_when: false

- name: Execute handlers
  meta: flush_handlers
