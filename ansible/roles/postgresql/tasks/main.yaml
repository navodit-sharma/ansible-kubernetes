---

- name: add postgresql repository apt-key
  apt_key:
    id: "{{ postgresql_apt_key_id }}"
    url: "{{ postgresql_apt_key_url }}"
    state: present
  when: postgresql_apt_key_url and postgresql_apt_key_id
  tags: packages

- name: add postgresql repository
  apt_repository:
    repo: "{{ postgresql_apt_repository }}"
    state: present
  when: postgresql_apt_repository is defined
  register: postgresql_repo_added
  tags: packages

- name: apt update cache
  apt:
    update_cache: yes
  when: postgresql_repo_added.changed
  tags: packages

- name: install postgresql dependencies
  apt:
    name: [ 'libpq-dev', 'python-psycopg2', 'python3-psycopg2' ]
    state: present
  tags: [ 'packages','dependencies']

- name: install postgresql client
  apt:
    name: [ "postgresql-client-{{postgresql_version}}" ]
    state: present
  tags: [ 'packages','client' ]

- name: install postgresql server
  apt:
    name: [ "postgresql-{{postgresql_version}}" ]
    state: present
  tags: [ 'packages','server' ]

- name: uncomment listen_addresses & ensure postgres listening on eth1 ipv4 address
  lineinfile: dest=/etc/postgresql/11/main/postgresql.conf regexp=^#*\s*listen_addresses.*$
              line="listen_addresses = '{{ ansible_facts[network_interface]['ipv4']['address'] }}'"
  notify: restart postgres
  tags: [ 'configure' ]

- name: set correct ownership on postgres data directory
  file:
    path: /var/lib/postgresql
    state: directory
    mode: 0755
    owner: postgres
    group: postgres

- name: Add configuration file - pg_hba.conf
  template:
    src: "{{ role_path }}/templates/pg_hba.conf.j2"
    dest: /etc/postgresql/11/main/pg_hba.conf
    owner: postgres
    group: postgres
    mode: 0640
  notify: restart postgres

- name: ensure postgres is running
  service: name=postgresql state=started enabled=yes
  tags: [ 'service' ]

- name: Ensure database is created
  become_user: postgres
  postgresql_db: name={{ db_name }}
             encoding='UTF-8'
             lc_collate='en_US.UTF-8'
             lc_ctype='en_US.UTF-8'
             template='template0'
             state=present
  tags: [ 'configure', 'database' ]

- name: Ensure user has access to the database
  become_user: postgres
  postgresql_user: db={{ db_name }}
               name={{ db_user }}
               password={{ db_password }}
               priv=ALL
               state=present
  tags: [ 'configure', 'database' ]

- name: Ensure user does not have unnecessary privileges
  become_user: postgres
  postgresql_user: name={{ db_user }}
               role_attr_flags=NOSUPERUSER,NOCREATEDB
               state=present
  tags: [ 'configure', 'database' ]
