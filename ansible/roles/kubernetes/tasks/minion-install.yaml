
# Unhold kubernetes packages if required
- name: Unhold kubernetes packages
  command: apt-mark unhold "{{ item }}"
  with_items:
    - kubeadm
    - kubelet
    - kubectl
    - kubernetes-cni
    - conntrack
    - cri-tools
    - socat
  changed_when: false
  when: 'item|string in ansible_facts.packages'

# Install kubernetes common packages and add version lock
- name: Install kubernetes packages
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - "kubeadm={{ kubernetes_version }}"
      - "kubelet={{ kubernetes_version }}"
      - "kubernetes-cni"
  notify: Restart kubelet.service

 # Gather package facts
- name: Gather Package facts
  package_facts:
    manager: apt

- name: Hold kubernetes packages
  command: apt-mark hold "{{ item }}"
  with_items:
    - kubeadm
    - kubelet
    - kubernetes-cni
    - conntrack
    - cri-tools
    - socat
  changed_when: false
  when: 'item|string in ansible_facts.packages'

# Start kubelet
- name: Ensure kubelet.service is enabled and started
  systemd:
    name: kubelet
    daemon-reload: yes
    enabled: yes
    masked: no
    state: started
    no_block: no

# Get kubeadm token from master node
- name: Generate kubeadm join command
  shell: "kubeadm token create --print-join-command 2>/dev/null"
  register: kubeadmJoinCommand
  delegate_to: "{{ groups['master'][0] }}"
  changed_when: false

# Preflight checks
- name: Running preflight checks
  command: "{{ kubeadmJoinCommand.stdout | regex_replace('join', 'join phase preflight') }}"
  register: preflightChecks
  ignore_errors: true

- name: Validating if node was previously initialized
  debug:
    msg:
      - "************"
      - "*** INFO ***"
      - "************"
      - "It seems this machine has been already initialized, won't be re-initialized in current state. If there is a requirement to re-initialize it as fresh then first reset it with :"
      - "kubeadm reset -f"
  when: preflightChecks.stderr.find('ERROR FileAvailable') != -1 or preflightChecks.stderr.find('ERROR Port') != -1

- name: Setup kubernetes minion
  command: "{{ kubeadmJoinCommand.stdout }} --cri-socket {{ kubernetes_cri_socket_path }}"
  register: kubeadmJoinResult
  ignore_errors: true
  when: preflightChecks is succeeded

- name: Write kubeadm join logs
  block:
    - name: Write kubeadm join stdout result into logs
      copy:
        dest: "{{ kubernetes_log_dir_path }}/kubeadm-join.log"
        content: "{{ kubeadmJoinResult.stdout_lines | join('\n') }}"
      when: kubeadmJoinResult.stdout_lines is defined
    - name: Write kubeadm join stderr result into logs
      copy:
        dest: "{{ kubernetes_log_dir_path }}/kubeadm-join-error.log"
        content: "{{ kubeadmJoinResult.stderr_lines | join('\n') }}"
      when: kubeadmJoinResult.stderr_lines is defined

- name: Stop if minion setup failed
  fail:
    msg:
      - "**********************"
      - "*** Error detected ***"
      - "**********************"
      - "Kubernetes minion setup has failed, please check log files available in {{ kubernetes_log_dir_path }} for more information."
  when: kubeadmJoinResult is failed

- name: Add worker label to node
  command: "kubectl label node {{ hostvars[inventory_hostname].ansible_nodename }} node-role.kubernetes.io/worker= --overwrite=true"
  changed_when: false
  delegate_to: "{{ groups['master'][0] }}"

- name: Execute handlers
  meta: flush_handlers
