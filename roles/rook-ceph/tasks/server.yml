---

- name: Adding label to all nodes that hosts storage cluster
  command: kubectl label node "{{ hostvars[item].ansible_nodename }}" "{{ rook_node_affinity_label_key }}={{ rook_node_affinity_label_value }}" --overwrite=true
  loop: "{{ groups['storageminion'] }}"
  changed_when: false

- name: Creating required directories
  file:
    path: "{{ item }}"
    state: directory
    group: "{{ rook_system_group }}"
    owner: "{{ rook_system_user }}"
    mode: 0644
  with_items:
    - "{{ rook_server_config_dir_path }}"
    - "{{ rook_server_log_dir_path}}"

- name: Copying setup related files to server
  copy:
    src: "{{ role_path }}/files/rook/"
    dest: "{{ rook_server_config_dir_path }}"
    mode: 0644
    force: yes
    group: "{{ rook_system_group }}"
    owner: "{{ rook_system_user }}"

- name: Copying configuration YML files
  template:
    src: "{{ item }}"
    dest: "{{ rook_server_config_dir_path }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
    group: "{{ rook_system_group }}"
    owner: "{{ rook_system_user }}"
    mode: 0644
    force: yes
  with_fileglob:
    - ../templates/rook/*.j2

- name: Copying rook-ceph cluster destroy bash script
  template:
    src: "{{ role_path }}/templates/bash-scripts/destroy-rookceph-k8smaster.sh.j2"
    dest: /usr/local/bin/destroy-rookceph-k8smaster.sh
    group: "{{ rook_system_group }}"
    owner: "{{ rook_system_user }}"
    mode: 0755
    force: yes

- name: Deploying priorityClass resource
  command: kubectl --namespace {{ rook_k8s_namespace }} apply -f "{{ rook_server_config_dir_path }}/priorityclass.yml"
  register: rookCephPriorityClassDeploy
  changed_when: false

- name: Checking if rook-ceph setup status file exists
  stat: path="{{ rook_server_setup_status_file }}"
  register: rookCephSetupStatusFile

- name: Deploying rook-ceph common resources
  command: kubectl --namespace {{ rook_k8s_namespace }} apply -f "{{ rook_server_config_dir_path }}/common.yml"
  register: rookCephCommonResourceDeploy
  ignore_errors: yes
  when: not rookCephSetupStatusFile.stat.exists

- name: Deploying rook-ceph operator
  command: kubectl --namespace {{ rook_k8s_namespace }} apply -f "{{ rook_server_config_dir_path }}/operator.yml"
  register: rookCephOperatorDeploy
  ignore_errors: yes
  when:
    - not rookCephSetupStatusFile.stat.exists
    - rookCephCommonResourceDeploy is succeeded
    - rookCephPriorityClassDeploy is succeeded

- name: Deploying rook-ceph cluster
  command: kubectl --namespace {{ rook_k8s_namespace }} apply -f "{{ rook_server_config_dir_path }}/cluster.yml"
  register: rookCephClusterDeploy
  ignore_errors: yes
  when:
    - not rookCephSetupStatusFile.stat.exists
    - rookCephOperatorDeploy is succeeded

- name: Writing rook-ceph deployment logs
  block:
    - name: Writing rook-ceph commonResource deployment logs
      copy:
        dest: "{{ rook_server_log_dir_path }}/deploy_commonResource.log"
        content: "{{ rookCephCommonResourceDeploy.stdout_lines | join('\n') }}"
      when: rookCephCommonResourceDeploy.stdout_lines is defined
    - name: Writing rook-ceph commonResource error logs
      copy:
        dest: "{{ rook_server_log_dir_path }}/error_commonResource.log"
        content: "{{ rookCephCommonResourceDeploy.stderr_lines | join('\n') }}"
      when: rookCephCommonResourceDeploy.stderr_lines is defined
    - name: Writing rook-ceph operator deployment logs
      copy:
        dest: "{{ rook_server_log_dir_path }}/deploy_operator.log"
        content: "{{ rookCephOperatorDeploy.stdout_lines | join('\n') }}"
      when: rookCephOperatorDeploy.stdout_lines is defined
    - name: Writing rook-ceph operator error logs
      copy:
        dest: "{{ rook_server_log_dir_path }}/error_operator.log"
        content: "{{ rookCephOperatorDeploy.stderr_lines | join('\n') }}"
      when: rookCephOperatorDeploy.stderr_lines is defined
    - name: Writing rook-ceph cluster deployment logs
      copy:
        dest: "{{ rook_server_log_dir_path }}/deploy_cluster.log"
        content: "{{ rookCephClusterDeploy.stdout_lines | join('\n') }}"
      when: rookCephClusterDeploy.stdout_lines is defined
    - name: Writing rook-ceph cluster error logs
      copy:
        dest: "{{ rook_server_log_dir_path }}/error_cluster.log"
        content: "{{ rookCephClusterDeploy.stderr_lines | join('\n') }}"
      when: rookCephClusterDeploy.stderr_lines is defined

- name: Halting execution of play due to errors above
  fail: msg="Play was aborted; error in Rook-Ceph cluster deployment, check logs for more details."
  when: (rookCephCommonResourceDeploy is failed) or (rookCephOperatorDeploy is failed) or (rookCephClusterDeploy is failed)

- name: Deploying rook-ceph RBD blockPool
  command: kubectl --namespace {{ rook_k8s_namespace }} apply -f "{{ rook_server_config_dir_path }}/cephblockpool.yml"
  register: rookCephBlockPoolDeploy
  when:
    - not rookCephSetupStatusFile.stat.exists

- name: Deploying rook-ceph fileSystem
  command: kubectl --namespace {{ rook_k8s_namespace }} apply -f "{{ rook_server_config_dir_path }}/filesystem.yml"
  register: rookCephFileSystemDeploy
  when:
    - not rookCephSetupStatusFile.stat.exists

- name: Create rook-ceph setup status file
  file:
    dest: "{{ rook_server_setup_status_file }}"
    state: touch
  changed_when: false
  when:
    - rookCephPriorityClassDeploy is succeeded
    - rookCephCommonResourceDeploy is succeeded
    - rookCephOperatorDeploy is succeeded
    - rookCephClusterDeploy is succeeded
    - rookCephBlockPoolDeploy is succeeded
    - rookCephFileSystemDeploy is succeeded

- name: Checking if rook-ceph RBD storageClass already exists
  command: kubectl --namespace {{ rook_k8s_namespace }} get storageclass rook-ceph-block
  register: blockStorageClassExists
  ignore_errors: yes
  no_log: True

- name: Deploying rook-ceph RBD storageClass
  command: kubectl --namespace {{ rook_k8s_namespace }} apply -f "{{ rook_server_config_dir_path }}/rbd-storageclass.yml"
  when: blockStorageClassExists is failed

- name: Checking if rook-ceph FS storageClass already exists
  command: kubectl --namespace {{ rook_k8s_namespace }} get storageclass rook-ceph-filesystem
  register: fileSystemStorageClassExists
  ignore_errors: yes
  no_log: True

- name: Deploying rook-ceph fileSystem storageClass
  command: kubectl --namespace {{ rook_k8s_namespace }} apply -f "{{ rook_server_config_dir_path }}/cephfs-storageclass.yml"
  when: fileSystemStorageClassExists is failed

#- name: Patch Daemonsets resource
#  shell: kubectl --namespace {{ rook_k8s_namespace }} patch daemonset "{{ item }}" --patch "$(cat "{{ rook_server_config_dir_path }}/patch-priorityClass.yml")"
#  changed_when: false
#  with_items:
#    - csi-cephfsplugin
#    - csi-rbdplugin

#- name: Patch Deployment resource
#  shell: kubectl --namespace {{ rook_k8s_namespace }} patch deployment "{{ item }}" --patch "$(cat "{{ rook_server_config_dir_path }}/patch-priorityClass.yml")"
#  changed_when: false
#  with_items:
#    - csi-cephfsplugin-provisioner
#    - csi-rbdplugin-provisioner

#- name: Restarting cephfs-plugin-provisioner pods
#  command: kubectl --namespace {{ rook_k8s_namespace }} delete pod -l app=csi-cephfsplugin-provisioner --grace-period=0 --force
#  when: rookCephFileSystemDeploy is succeeded
#  changed_when: false
