
- name: Displaying installed vs desired version of kubernetes components
  debug:
    msg:
      - "**** Installed versions ****"
      - "Kubeadm === {{ ansible_facts.packages.kubeadm.0.version | regex_replace('^(.*)-.*', '\\1') }}"
      - "Kubelet === {{ ansible_facts.packages.kubelet.0.version | regex_replace('^(.*)-.*', '\\1') }}"
      - .
      - .
      - .
      - .
      - .
      - .
      - "**** Desired versions ****"
      - "Kubeadm === {{ kubernetes_version | regex_replace('^(.*)-.*', '\\1') }}"
      - "Kubelet === {{ kubernetes_version | regex_replace('^(.*)-.*', '\\1') }}"

- name: Determining if upgrade can continue
  block:
    - name: Stopping execution as already a newer version is installed
      fail:
        msg:
          - "**********************"
          - "*** Error detected ***"
          - "**********************"
          - "Already a newer version ({{ ansible_facts.packages.kubeadm.0.version }}) is installed. Requested version ({{ kubernetes_version }}) won't be installed. Stopping execution."
      when: "not ansible_facts.packages.kubeadm.0.version is version(kubernetes_version, 'le')"
    - name: Proceeding towards upgrade of minion
      debug:
        msg:
          - "Kubeadm's currently INSTALLED version is either OLDER or EQUAL to DESIRED version, upgrade can be performed. Starting upgrade..."
          - .
          - .
          - .
          - .
          - .
          - .
          - "kubeadm package version [installed] == {{ ansible_facts.packages.kubeadm.0.version }}"
          - "Kubeadm package version [desired] == {{ kubernetes_version }}"
      when: "ansible_facts.packages.kubeadm.0.version is version(kubernetes_version, 'le')"

- name: Create kubernetes upgrade log directory
  file:
    path: "{{ kubernetes_log_dir_path }}/upgrade"
    state: directory
    group: "{{ system_group }}"
    owner: "{{ system_user }}"
    mode: 0755
    recurse: no

- name: Unholding kubeadm package
  command: apt-mark unhold kubeadm kubernetes-cni
  changed_when: false

- name: Installing kubeadm
  apt:
    name: "kubeadm={{ kubernetes_version }}"
    state: present
    update_cache: yes

- name: Holding kubeadm package
  command: apt-mark hold kubeadm kubernetes-cni
  changed_when: false

- name: Draining minion node
  command: "kubectl drain {{ hostvars[inventory_hostname].ansible_nodename }} --delete-local-data --ignore-daemonsets"
  changed_when: false
  delegate_to: "{{ groups['master'][0] }}"

- name: Applying upgrade
  command: "kubeadm upgrade node config --kubelet-version {{ kubernetes_version | regex_replace('^(.*)-.*', '\\1') }}"
  changed_when: false
  register: upgradeStatus
  ignore_errors: true

- name: Writing upgrade logs to file
  block:
    - name: Writing upgrade stdout logs to file
      copy:
        dest: /var/log/kubernetes/upgrade/upgrade-node-info.log
        content: "{{ upgradeStatus.stdout_lines | join('\n') }}"
      when: upgradeStatus.stdout_lines is defined
    - name: Writing upgrade plan's stderr logs to file
      copy:
        dest: /var/log/kubernetes/upgrade/upgrade-node-error.log
        content: "{{ upgradeStatus.stderr_lines | join('\n') }}"
      when: upgradeStatus.stderr_lines is defined

- name: Halting play if upgrade failed in previous step
  fail:
    msg:
      - "**********************"
      - "*** Error detected ***"
      - "**********************"
      - "Upgrade has failed, please check logs for more details about failure."
      - "System will try to do an automatic rollback but it is advised to check if all services are up with correct versions."
  when: upgradeStatus is failed or upgradeStatus.stdout.find('you should go ahead and upgrade the kubelet package') == -1

# Unhold kubernetes packages if required
# conntrack cri-tools kubectl kubelet kubernetes-cni socat
- name: Unhold kubernetes packages
  command: apt-mark unhold "{{ item }}"
  with_items:
    - kubelet
  changed_when: false
  when: 'item|string in ansible_facts.packages'

# Install kubernetes common packages and add version lock
- name: Install kubernetes packages
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - "kubelet={{ kubernetes_version }}"
  notify: Restart kubelet.service

- name: Version lock kubernetes packages
  command: apt-mark hold kubelet
  changed_when: false

# # Configure kubelet
# - name: Add kubelet configuration
#   copy:
#     backup: yes
#     dest: /etc/default/kubelet
#     group: "{{ kubernetes_system_group }}"
#     owner: "{{ kubernetes_system_user }}"
#     mode: 0644
#     src: "{{ role_path }}/templates/kubelet/etc-default-kubelet"
#   notify: Restart kubelet.service

# Start kubelet
- name: Ensure kubelet.service is enabled and started
  systemd:
    name: kubelet
    daemon-reload: yes
    enabled: yes
    masked: no
    state: started
    no_block: no

- name: Making minion node schedulable
  command: "kubectl uncordon {{ hostvars[inventory_hostname].ansible_nodename }}"
  changed_when: false
  delegate_to: "{{ groups['master'][0] }}"

- name: Execute handlers
  meta: flush_handlers
